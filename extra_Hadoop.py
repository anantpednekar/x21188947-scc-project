#!/usr/bin/env python
# Import necessary modules

from mrjob.job import MRJob
from mrjob.step import MRStep

# number of Errors generated by each node 
# Define an MRJob class to analyze the number of errors generated by each node.

class MRNodeErrorAnalysisJob(MRJob):
    
    # Mapper function: Extracts relevant information from log lines and emits a key-value pair of (node_name, 1) for fatal errors with "error" in the message content.

    def node_error_mapper(self, _, line):
        fields = line.split()
        if len(fields) >= 8:
            node_name = fields[3]
            level = fields[8]
            message_content = ' '.join(fields[9:])
            if level == "FATAL" and "error" in message_content.lower():
                yield node_name, 1

    # Combiner function: Sums up the counts of errors emitted by the mapper for each node.
    def node_error_combiner(self, node_name, values):
        yield node_name, sum(list(values))

    # Reducer function: Sums up the counts of errors for each node and yields the final result.
    def node_error_reducer(self, node_name, counts):
        yield node_name, sum(list(counts))

    def steps(self):
        return [
            MRStep(mapper=self.node_error_mapper,
                   combiner=self.node_error_combiner,
                   reducer=self.node_error_reducer)
        ]

if __name__ == '__main__':
    MRNodeErrorAnalysisJob.run()
