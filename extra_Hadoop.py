#!/usr/bin/env python
from mrjob.job import MRJob
from mrjob.step import MRStep
import datetime
# number of Errors generated by each node 
class MRNodeErrorAnalysisJob(MRJob):
    def node_error_mapper(self, _, line):
        fields = line.split()
        if len(fields) >= 8:
            date = fields[2]
            date_time = fields[4]
            node_name = fields[3]
            hour = datetime.datetime.strptime(date_time, "%Y-%m-%d-%H.%M.%S.%f").hour
            day_of_week = datetime.datetime.strptime(date, "%Y.%m.%d").strftime("%A")
            level = fields[8]
            message_content = ' '.join(fields[9:])
            if level == "FATAL" and "error" in message_content.lower():
                yield node_name, 1

    def node_error_combiner(self, node_name, values):
        yield node_name, sum(list(values))

    def node_error_reducer(self, node_name, counts):
        yield node_name, sum(list(counts))

    def steps(self):
        return [
            MRStep(mapper=self.node_error_mapper,
                   combiner=self.node_error_combiner,
                   reducer=self.node_error_reducer)
        ]

if __name__ == '__main__':
    MRNodeErrorAnalysisJob.run()
